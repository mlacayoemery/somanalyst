#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Wed Mar 12 12:09:37 2008

import wx

# begin wxGlade: extracode
# end wxGlade



class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel = wx.Panel(self)
        
        # Menu Bar
        self.menubar = wx.MenuBar()

        #file menu
        menu = wx.Menu()
        Exit=wx.NewId()
        menu.Append(Exit, "E&xit", "Exit SOM Analyst")
        self.menubar.Append(menu, "&File")

        #utilities menu
        #conversion submenu
        menu = wx.Menu()
        menu_sub = wx.Menu()
        CSVtoDBF,DBFtoCSV,Conversion=wx.NewId(),wx.NewId(),wx.NewId()
        menu_sub.Append(CSVtoDBF, "&CSV to DBF", "Convert a CSV file to the DBF format")
        menu_sub.Append(DBFtoCSV, "&DBF to CSV", "Convert a DBF file to the CSV format")
        menu.AppendMenu(Conversion, "&Conversion", menu_sub, "Data conversion utilities")

        #merging submenu
        menu_sub = wx.Menu()
        Merge,Rows,Columns=wx.NewId(),wx.NewId(),wx.NewId()
        menu_sub.Append(Columns, "Append &Columns", "Append columns")
        menu_sub.Append(Rows, "Append &Rows", "Append rows")
        menu.AppendMenu(Merge, "&Merging", menu_sub, "Data merging utilites")

        #filtering submenu
        menu_sub = wx.Menu()
        Filter,One,Multiple=wx.NewId(),wx.NewId(),wx.NewId()
        menu_sub.Append(One, "Extract &One Block", "Extract a single block of data")
        menu_sub.Append(Multiple, "Extract &Multiple Blocks", "Extract multiple blocks of data")
        menu.AppendMenu(Filter, "&Filtering", menu_sub, "Data filtering utilities")
        self.menubar.Append(menu, "&Utilities")

        #computation menu
        #som submenu
        SOM=wx.NewId()
        #Euclidean submenu
        Euclidean,Initial,TrainE,ProjectE=wx.NewId(),wx.NewId(),wx.NewId(),wx.NewId()
        menu = wx.Menu()
        menu_sub = wx.Menu()
        menu_sub_sub = wx.Menu()
        menu_sub_sub.Append(Initial, "&Initialize", "Initialize a SOM")
        menu_sub_sub.Append(TrainE, "&Train", "Train a SOM")
        menu_sub_sub.Append(ProjectE, "&Project Data", "Project data onto a SOM")
        menu_sub.AppendMenu(Euclidean, "&Euclidean", menu_sub_sub, "SOM functions using Euclidean distance measure")

        #cosine submenu
        menu_sub_sub = wx.Menu()
        Cosine,TrainC,ProjectC=wx.NewId(),wx.NewId(),wx.NewId()
        menu_sub_sub.Append(Initial, "&Initialize", "Initialize a SOM")
        menu_sub_sub.Append(TrainC, "&Train", "Train a SOM")
        menu_sub_sub.Append(ProjectC, "&Project Data", "Project data onto a SOM")
        menu_sub.AppendMenu(Cosine, "&Cosine", menu_sub_sub, "SOM functions using cosine distance meassure")
        menu.AppendMenu(SOM, "&SOM", menu_sub, "SOM basic functions")

        #statistical submenu
        #interpolation submenu
        menu_sub = wx.Menu()
        menu_sub_sub = wx.Menu()
        Interpolation,Trajectory,Plane=wx.NewId(),wx.NewId(),wx.NewId()
        menu_sub_sub.Append(Trajectory, "Tra&jectory", "Interpolate values within a trajectory")
        menu_sub_sub.Append(Plane, "Component &Planes", "Interpolate neurons within a SOM")
        menu_sub.AppendMenu(Interpolation, "&Interpolation", menu_sub_sub, "Interpolate values")

        #clustering submenu
        menu_sub_sub = wx.Menu()
        Kmeans,Hierarchical,Cluster,Statistical=wx.NewId(),wx.NewId(),wx.NewId(),wx.NewId()
        menu_sub_sub.Append(Kmeans, "&K-means", "Perform a K-means custering")
        menu_sub_sub.Append(Hierarchical, "&Hierarchical", "Perform a hierarchical clustering")
        menu_sub.AppendMenu(Cluster, "&Clustering", menu_sub_sub, "Perform clustering")
        menu.AppendMenu(Statistical, "&Statistical", menu_sub, "Perform statitical functions")
        self.menubar.Append(menu, "&Computation")

        #visualization menu
        menu = wx.Menu()
        Polygon,Point,Trajectory=wx.NewId(),wx.NewId(),wx.NewId()
        menu.Append(Polygon, "SOM to Poly&gons", "Convert a SOM into a polygon shapefile")
        menu.Append(Point, "Data to Poin&ts", "Convert BMU data into a point shapefile")
        menu.Append(Trajectory, "Data to Tra&jectories", "Convert BMU data into a line shapefile")
        self.menubar.Append(menu, "&Visualization")

        #help menu
        menu = wx.Menu()
        Help,About=wx.NewId(),wx.NewId()
        menu.Append(Help, "Help &Contents", "Help contents including a tutorial")
        menu.AppendSeparator()
        menu.Append(About, "&About", "About SOM Analyst")
        self.menubar.Append(menu, "&Help")
        self.SetMenuBar(self.menubar)

        # Menu Bar end
        self.frame_1_statusbar = self.CreateStatusBar(1, 0)
        #self.text_ctrl_1 = wx.TextCtrl(self, -1, "")

        # events
        wx.EVT_MENU(self, Initial, self.OnInitialize)        


    def OnExit(self,event):
        pass

    def OnCSVtoDBF(self,event):
        pass

    def OnDBFtoCSV(self,event):
        pass

    def OnMergeColumns(self,event):
        pass

    def OnMergeRows(self,event):
        pass

    def OnExtractBlock(self,event):
        pass

    def OnExtractBlocks(self,event):
        pass

    def OnInitialize(self,event):
        #dlg = wx.Dialog(self, -1, "Initialize a SOM")
        box = wx.StaticBox(self.panel, -1, "")

        #create controls
        input = wx.StaticText(self, -1, "input data")
        inputDataID = wx.NewId()
        inputData = wx.TextCtrl(self, inputDataID, "")

        output = wx.StaticText(self, -1, "output codebook file name")
        outputDataID = wx.NewId()
        outputData = wx.TextCtrl(self, outputDataID, "")
        
        topology = wx.StaticText(self, -1, "topology type of map")
        topologyID = wx.NewId()
        topologyBox = wx.ComboBox(self, topologyID, choices=["hexagonal", "square"], style=wx.CB_DROPDOWN)
        
        neighborhood = wx.StaticText(self, -1, "neighborhood type")
        neighID = wx.NewId()
        neighBox = wx.ComboBox(self, neighID, choices=["gaussian","bubble"], style=wx.CB_DROPDOWN)

        Xdim = wx.StaticText(self, -1, "X dimension")
        XdimID = wx.NewId()
        XdimData = wx.TextCtrl(self, XdimID, "")

        Ydim = wx.StaticText(self, -1, "Y dimension")
        YdimID = wx.NewId()
        YdimData = wx.TextCtrl(self, YdimID, "")

        initType = wx.StaticText(self, -1, "initialization type")
        initTypeID = wx.NewId()
        initTypeBox = wx.ComboBox(self, initTypeID, choices=["random","linear"], style=wx.CB_DROPDOWN)

        seed = wx.StaticText(self, -1, "random generator seed (optional)")
        seedID = wx.NewId()
        seedData = wx.TextCtrl(self, seedID, "")

        buffer = wx.StaticText(self, -1, "read buffer (optional)")
        bufferID = wx.NewId()
        bufferData = wx.TextCtrl(self, bufferID, "")

        topologyBox.SetSelection(0)
        neighBox.SetSelection(0)
        initTypeBox.SetSelection(0)


        #create layout
        #add dialog elements to box
        sizer = wx.StaticBoxSizer(box, wx.VERTICAL)
        sizer.Add(input, 0, 0, 0)
        sizer.Add(inputData, 0, 0, 0)
        sizer.Add(output, 0, 0, 0)
        sizer.Add(outputData, 0, 0, 0)
        sizer.Add(topology, 0, 0, 0)
        sizer.Add(topologyBox, 0, 0, 0)
        sizer.Add(neighborhood, 0, 0, 0)
        sizer.Add(neighBox, 0, 0, 0)
        sizer.Add(Xdim, 0, 0, 0)
        sizer.Add(XdimData, 0, 0, 0)
        sizer.Add(Ydim, 0, 0, 0)
        sizer.Add(YdimData, 0, 0, 0)
        sizer.Add(initType, 0, 0, 0)
        sizer.Add(initTypeBox, 0, 0, 0)
        sizer.Add(seed, 0, 0, 0)
        sizer.Add(seedData, 0, 0, 0)
        sizer.Add(buffer, 0, 0, 0)
        sizer.Add(bufferData, 0, 0, 0)

        self.panel.SetSizer(sizer)     

    def OnTrainEuclidean(self,event):
        pass

    def OnProjectEuclidean(self,event):
        pass

    def OnTrainCosine(self,event):
        pass

    def OnProjectCosine(self,event):
        pass

    def OnInterpolateTrajectory(self,event):
        pass

    def OnInterpolatePlane(self,event):
        pass

    def OnKmeans(self,event):
        pass

    def OnHieracrhical(self,event):
        pass

    def OnCODtoPolygon(self,event):
        pass

    def OnBMUtoPoint(self,event):
        pass

    def OnBMUtoLine(self,event):
        pass

    def OnHelp(self,event):
        pass

    def OnAbout(self,event):
        pass

    

class MyApp(wx.App):
    def OnInit(self):
        frame = MyFrame(None, -1, "SOM Analyst",(0,0),(800,600))
        frame.Show(True)
        self.SetTopWindow(frame)
        return True

app = MyApp(0)
app.MainLoop()
